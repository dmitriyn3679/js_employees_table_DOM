{"version":3,"sources":["scripts/main.js"],"names":["root","document","querySelector","table","tHead","tBody","tdList","querySelectorAll","setWidth","forEach","td","style","width","parseFloat","getComputedStyle","addAttributes","tBodyList","children","tr","cells","item","index","dataset","label","textContent","toLowerCase","getNumber","num","replace","parseTable","map","row","person","cell","sortData","data","columnName","sortType","arrEl","callBacks","forString","a","b","localeCompare","forNum","sort","replaceTable","innerHTML","name","position","office","age","salary","join","addEventListener","e","target","sortColumnName","parentNode","tagName","selected","classList","remove","add","offices","formEl","city","formValidator","nameLength","length","addNotification","type","notification","insertAdjacentHTML","setTimeout","makeSalaryValue","form","preventDefault","formData","FormData","tableData","Object","fromEntries","entries","newRow","reset","getCellType","value","cellType","includes","isNaN","validateCell","newValue","toFixed","bodyEvent","initialValue","inputCell","selectionStart","focus","blurAction","inputMouseEvent","currentValue","currentCellType","inputText","outerHTML","inputKeyEvent","key","removeEventListener"],"mappings":"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","file":"main.1a21c2c5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst root = document.querySelector('body');\nconst table = document.querySelector('table');\nconst tHead = document.querySelector('thead > tr');\nconst tBody = document.querySelector('tbody');\nconst tdList = root.querySelectorAll('td');\n\n// When I want edit my table cell, my input have own width, and table stretches.\n// Here I set fixed width for my cells,\n// and in css 100% relative width for my input.\nconst setWidth = () => {\n  tdList.forEach(td => {\n    td.style.width = `${parseFloat(getComputedStyle(td).width)}px`;\n  });\n};\n\nsetWidth();\n\nfunction addAttributes() {\n  const tBodyList = [...tBody.children];\n\n  for (const tr of tBodyList) {\n    [...tr.cells].forEach((item, index) => {\n      item.dataset.label = tHead.children[index].textContent.toLowerCase();\n    });\n  }\n}\n\naddAttributes();\n\n// sort table;\nconst getNumber = num => {\n  return num.replace(/[\\D]+/g, '');\n};\n\nconst parseTable = () => {\n  return [...tBody.children].map(row => {\n    const person = {};\n\n    [...row.cells].forEach(cell => {\n      person[cell.dataset.label] = cell.textContent;\n    });\n\n    return person;\n  });\n};\n\nconst sortData = (data, columnName, sortType) => {\n  const arrEl = getNumber(data[0][columnName]);\n\n  const callBacks = {\n    'ASC': {\n      forString: (a, b) => a[columnName].localeCompare(b[columnName]),\n      forNum: (a, b) => getNumber(a[columnName]) - getNumber(b[columnName]),\n    },\n    'DESC': {\n      forString: (a, b) => b[columnName].localeCompare(a[columnName]),\n      forNum: (a, b) => getNumber(b[columnName]) - getNumber(a[columnName]),\n    },\n  };\n\n  if (arrEl !== '') {\n    return data.sort(callBacks[sortType].forNum);\n  }\n\n  return data.sort(callBacks[sortType].forString);\n};\n\nconst replaceTable = (data) => {\n  tBody.innerHTML = data.map(row => `\n    <tr>\n      <td data-label=\"name\">${row.name}</td>\n      <td data-label=\"position\">${row.position}</td>\n      <td data-label=\"office\">${row.office}</td>\n      <td data-label=\"age\">${row.age}</td>\n      <td data-label=\"salary\">${row.salary}</td>\n    </tr>\n    `).join('');\n};\n\ntHead.addEventListener('click', e => {\n  const sortType = e.target.dataset.sort;\n  const sortColumnName = e.target.textContent.toLowerCase();\n  const data = parseTable();\n\n  switch (sortType) {\n    case 'ASC':\n      e.target.dataset.sort = 'DESC';\n      break;\n\n    default:\n      e.target.dataset.sort = 'ASC';\n      break;\n  }\n\n  sortData(data, sortColumnName, e.target.dataset.sort);\n\n  replaceTable(data);\n  setWidth();\n});\n\n// select row;\n\ntBody.addEventListener('click', e => {\n  if (e.target.parentNode.tagName !== 'TR') {\n    return;\n  }\n\n  const selected = tBody.querySelector('.active');\n\n  if (selected) {\n    selected.classList.remove('active');\n  }\n  e.target.parentNode.classList.add('active');\n});\n\n// form;\n\nconst offices = [\n  'Tokyo', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco',\n];\n\nconst formEl = `\n  <form class=\"new-employee-form\">\n    <label>\n      Name: \n    <input \n      data-qa=\"name\" \n      name=\"name\" \n      type=\"text\" \n      required\n    >\n    </label>\n    <label>\n      Position:\n      <input\n        data-qa=\"position\" \n        name=\"position\" \n        type=\"text\"\n      >\n    </label>\n    <label>\n      Office:\n      <select data-qa=\"office\" name=\"office\">\n      ${offices.map(city => `<option value=\"${city}\">${city}</option>`)}\n    </select>\n    </label>\n    <label>\n      Age:\n      <input\n        data-qa=\"age\" \n        name=\"age\" \n        type=\"number\"\n      >\n    </label>\n    <label>\n      Salary: \n      <input \n        data-qa=\"salary\" \n        name=\"salary\" \n        type=\"number\"\n      >\n    </label>\n    <button>Save to table</button>\n  </form>\n`;\n\nconst formValidator = (data) => {\n  const nameLength = data.name.length;\n  const age = data.age;\n  const salary = data.salary;\n\n  return nameLength >= 4 && (age >= 18 && age <= 90) && salary > 0;\n};\n\nconst addNotification = type => {\n  let notification;\n\n  switch (type) {\n    case 'success':\n      notification = `\n        <div \n          data-qa=\"notification\" \n          class=\"notification ${type}\"\n        >\n          <p class=\"title\">\n            The employee was successfully added. \n          </p>\n        </div>\n      `;\n      break;\n    case 'error':\n      notification = `\n        <div \n          data-qa=\"notification\" \n          class=\"notification ${type}\"\n        >\n          <p class=\"title\">\n            Invalid data.\n            Сheck the following:\n            * Name value has not less than 4 letters\n            * Age is not less than 18 or more than 90\n          </p>\n        </div>\n        `;\n      break;\n  }\n  root.insertAdjacentHTML('afterbegin', notification);\n\n  setTimeout(() => {\n    const message = root.querySelector('.notification');\n\n    message.remove();\n  }, 3000);\n};\n\nconst makeSalaryValue = num => {\n  return `$${num.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`;\n};\n\ntable.insertAdjacentHTML('afterend', formEl);\n\nconst form = document.querySelector('form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const formData = new FormData(form);\n  const tableData = Object.fromEntries(formData.entries());\n\n  if (!formValidator(tableData)) {\n    addNotification('error');\n\n    return;\n  }\n\n  const newRow = `\n    <tr>\n      <td data-label=\"name\">${tableData.name}</td>\n      <td data-label=\"position\">${tableData.position}</td>\n      <td data-label=\"office\">${tableData.office}</td>\n      <td data-label=\"age\">${tableData.age}</td>\n      <td data-label=\"salary\">${makeSalaryValue(tableData.salary)}</td>\n    </tr>\n  `;\n\n  tBody.insertAdjacentHTML('beforeend', newRow);\n  addNotification('success');\n  form.reset();\n  setWidth();\n});\n\n// editing of table cells;\n\nconst getCellType = (value) => {\n  let cellType;\n\n  switch (true) {\n    case value.includes('$'):\n      cellType = 'salary';\n      break;\n\n    case offices.includes(value):\n      cellType = 'office';\n      break;\n\n    case !isNaN(+value):\n      cellType = 'age';\n      break;\n\n    case typeof value === 'string':\n      cellType = 'str';\n      break;\n  }\n\n  return cellType;\n};\n\nconst validateCell = (cellType, newValue) => {\n  switch (cellType) {\n    case 'str':\n      if (newValue.length > 2) {\n        return newValue;\n      }\n      break;\n\n    case 'office':\n      if (offices.includes(newValue)) {\n        return newValue;\n      }\n      break;\n\n    case 'age':\n      if (newValue >= 18 && newValue <= 90) {\n        return newValue;\n      }\n      break;\n\n    case 'salary':\n      if (!isNaN(parseFloat(newValue.replace('$', '')))) {\n        return `$${parseFloat(\n          newValue\n            .replace('$', '')\n            .replace(',', '.')\n            .replace('-', ''))\n          .toFixed(3)\n        }`;\n      }\n  }\n};\n\ntBody.addEventListener('dblclick', bodyEvent => {\n  const initialValue = bodyEvent.target.textContent;\n\n  bodyEvent.target.innerHTML = `<input \n                                  type=\"text\" \n                                  class=\"cell-input\"  \n                                  value=\"${initialValue}\">`;\n\n  const inputCell = tBody.querySelector('.cell-input');\n\n  inputCell.selectionStart = inputCell.value.length;\n  inputCell.focus();\n\n  const blurAction = (inputMouseEvent) => {\n    const currentValue = inputMouseEvent.target.value;\n\n    const currentCellType = getCellType(initialValue);\n\n    const newData = validateCell(currentCellType, currentValue);\n\n    const inputText = newData || initialValue;\n\n    inputMouseEvent.target.outerHTML = `<td>${inputText}</td>`;\n  };\n\n  inputCell.addEventListener('blur', blurAction);\n\n  inputCell.addEventListener('keydown', inputKeyEvent => {\n    if (inputKeyEvent.key !== 'Enter') {\n      return;\n    }\n\n    const inputText = inputKeyEvent.target.value;\n\n    inputCell.removeEventListener('blur', blurAction);\n\n    inputKeyEvent.target.outerHTML = `<td>${inputText}</td>`;\n  });\n});\n"]}